<link rel="stylesheet" href="style.css" type="text/css" />
<p>
<abbr title"The All Squidgy Content Management System">SquidgyCMS</abbr> uses single file modules to build sites.
Core modules are all stored in the top level Modules directory, and custom ones can be installed by simply adding their module file to the Sites/Custom_Modules directory.
SquidgyCMS will automatically detect their presence, perform <strong>very</strong> basic functionality checks and add them to the list of available modules.
</p><p>
Module files <strong>must contain</strong> at least either a Block object or and Admin object.
These are used to display the block which the module creates and the admin section for the module respectively.
Additionally the module file may contain the a static class of the same name as the module ID.
</p><p>
Each module must have a unique ID which is used as part of the file name.
The ID may only contain alpha-numeric characters or underscores.
The full file name of a module file is <code><em>moduleID</em>.module.PHP</code>
</p>

<h2>The Block object:</h2>
This is a PHP4 compatible object which extends the main Block object, it is this that SquidgyCMS will instantiate then call against to generate blocks on the user pages.
<h3>Naming</h3>
It must be named <code>Block<em>moduleID</em></code> where <em>moduleID</em> is the ID of your module.
<h3>Methods</h3>
Your block object <strong>must</strong> have the following methods to be a valid module:
<dl>
	<dt>Block<em>moduleID</em>()</dt>
		<dd>This is the method called when the object is instantiated, and must contain a call to <code>parent::__construct()</code></dd>
</dl>
It is expecteed that your object will also contain other methods which match the calls made by users via the <a href="SquidgyML.htm"><abbr title="Squidgy CMS Markup Language">SquidgyML</abbr></a>.


<h2>The Admin object:</h2>
This is a PHP4 compatible object which extends the main Admin object, it is this that SquidgyCMS will instantiate then call against to generate the administration section for your module.
<h3>Naming</h3>
It must be named <code>Admin<em>moduleID</em></code> where <em>moduleID</em> is the ID of your module.
<h3>Methods</h3>
Your admin object <strong>must</strong> have the following methods to be a valid module:
<dl>
	<dt>Admin<em>moduleID</em>()</dt>
		<dd>This is the method called when the object is instantiated, and must contain a call to <code>parent::__construct()</code></dd>
	<dt>printAdminForm()</dt>
		<dd>This is the method called to generate the contents of the admin page form</dd>
	<dt>submit(<var>$content</var>=0)</dt>
		<dd>This is the method called by the page handling the form submission, <var>$content</var> will be passed only if it's not empty and in this case it will have been cleaned to remove PHP tags and extra slashes</dd>
</dl>
Methods that are implemented by the parent, and should not be overridden:
<dl>
	<dt>printFormHeader()</dt>
		<dd>This creates the top of the form setting the correct module type inputs for submission etc.</dd>
	<dt>printFormFooter()</dt>
		<dd>This creates the bottom of the form</dd>
</dl>
Modules that are implemented by the parent, and can be used in the modules:
<dl>
	<dt>printTextarea()</dt>
		<dd>This prints a textarea that will submit a large body of text to the <var>$content</var> variable passed to the submit function</dd>
	<dt>genTimeSelector()</dt>
		<dd>This prints two select boxes that enable the user to select a time</dd>
	<dt>genDateSelector()</dt>
		<dd>This prints three select boxes that enable the user to select a date, these are also corrected appropriately for days in each month including February during leap years</dd>
</dl>

<h2>Common Module Methods and Properties:</h2>
There are a number of methods common to all module classes (be they block or admin sections).
<h3>Module Data</h3>
<dl>
	<dt><var>$this->complex_data</var> = FALSE</dt>
		<dd>This property specifies whether the data stored by the module is a 2D associative array (<var>$this->complex_data</var> = true) or a simple array</dd>
	<dt><var>$this->data</var> = array()</dt>
		<dd>This is an (associative) array of the data available to the module</dd>
	<dt><var>$this->data_key_column</var> = FALSE</dt>
		<dd>If the data that this modules stores is complex then this can be used to signify which column (string, column name) of the data is used as the key for that row</dd>
	<dt>$this->get_data()</dt>
		<dd>Load the modules previously saved data from the data file into <var>$this->data</var></dd>
	<dt>$this->put_data()</dt>
		<dd>Save the data in <var>$this->data</var> to the data file</dd>
</dl>

